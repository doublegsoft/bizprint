# This is the CMakeCache file.
# For build in directory: /export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets/build/mingw64
# It was generated by CMake: /export/opt/cmake-3.20.6/bin/cmake
# You can edit this file to change values found and used by cmake.
# If you do not want to change any of the values, simply exit the editor.
# If you do want to change a value, simply edit, save, and exit the editor.
# The syntax for the file is as follows:
# KEY:TYPE=VALUE
# KEY is the name of a variable in the cache.
# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
# VALUE is the current value for the KEY.

########################
# EXTERNAL cache entries
########################

//Build the testing tree.
BUILD_TESTING:BOOL=ON

//Path to a program.
CMAKE_ADDR2LINE:FILEPATH=/usr/bin/x86_64-w64-mingw32-addr2line

//Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/x86_64-w64-mingw32-ar

//Choose the type of build, options are: None Debug Release RelWithDebInfo
// MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Release

//Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/x86_64-w64-mingw32-gcc-ar

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/x86_64-w64-mingw32-gcc-ranlib

//Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

//Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

//Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

//Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32

//Path to a program.
CMAKE_DLLTOOL:FILEPATH=/usr/bin/x86_64-w64-mingw32-dlltool

//Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

//Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=

//Convert GNU import libraries to MS format (requires Visual Studio)
CMAKE_GNUtoMS:BOOL=OFF

//User executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

//Read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

//Read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

//Documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

//C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

//Info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

//Object code libraries (lib)
CMAKE_INSTALL_LIBDIR:PATH=lib

//Program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

//Locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

//Modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

//Man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

//C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

//Run-time variable data (LOCALSTATEDIR/run)
CMAKE_INSTALL_RUNSTATEDIR:PATH=

//System admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

//Modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

//Read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

//Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/x86_64-w64-mingw32-ld

//Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make

//Flags used by the linker during the creation of modules during
// all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of modules during
// DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of modules during
// MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of modules during
// RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of modules during
// RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/x86_64-w64-mingw32-nm

//Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/x86_64-w64-mingw32-objcopy

//Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/x86_64-w64-mingw32-objdump

//Value Computed by CMake
CMAKE_PROJECT_DESCRIPTION:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_HOMEPAGE_URL:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC=libwebsockets

//Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/x86_64-w64-mingw32-ranlib

//Flags for Windows Resource Compiler during all build types.
CMAKE_RC_FLAGS:STRING=

//Flags for Windows Resource Compiler during DEBUG builds.
CMAKE_RC_FLAGS_DEBUG:STRING=

//Flags for Windows Resource Compiler during MINSIZEREL builds.
CMAKE_RC_FLAGS_MINSIZEREL:STRING=

//Flags for Windows Resource Compiler during RELEASE builds.
CMAKE_RC_FLAGS_RELEASE:STRING=

//Flags for Windows Resource Compiler during RELWITHDEBINFO builds.
CMAKE_RC_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_READELF:FILEPATH=/usr/bin/x86_64-w64-mingw32-readelf

//Flags used by the linker during the creation of shared libraries
// during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of shared libraries
// during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of shared libraries
// during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of shared libraries
// during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of shared libraries
// during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

//Flags used by the linker during the creation of static libraries
// during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of static libraries
// during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of static libraries
// during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of static libraries
// during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of static libraries
// during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/x86_64-w64-mingw32-strip

//The CMake toolchain file
CMAKE_TOOLCHAIN_FILE:FILEPATH=/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/cmake/mingw64.cmake

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

//Path to the coverage program that CTest uses for performing coverage
// inspection
COVERAGE_COMMAND:FILEPATH=/usr/bin/gcov

//Extra command line flags to pass to the coverage tool
COVERAGE_EXTRA_FLAGS:STRING=-l

//How many times to retry timed-out CTest submissions.
CTEST_SUBMIT_RETRY_COUNT:STRING=3

//How long to wait between timed-out CTest submissions.
CTEST_SUBMIT_RETRY_DELAY:STRING=5

//Maximum time allowed before CTest will kill the test.
DART_TESTING_TIMEOUT:STRING=1500

//Avoid treating compiler warnings as fatal errors
DISABLE_WERROR:BOOL=OFF

//Path to a program.
GITCOMMAND:FILEPATH=/usr/bin/git

//Git command line client
GIT_EXECUTABLE:FILEPATH=/usr/bin/git

//Libwebsockets include directories
LIBWEBSOCKETS_INCLUDE_DIRS:PATH=/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets/lib;/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets/build/mingw64

//Libwebsocket libraries
LIBWEBSOCKETS_LIBRARIES:STRING=websockets;websockets_shared

//Libwebsocket shared library
LIBWEBSOCKETS_LIBRARIES_SHARED:STRING=websockets_shared

//Libwebsocket static library
LIBWEBSOCKETS_LIBRARIES_STATIC:STRING=websockets

//Android 7+ reportedly needs this
LWS_AVOID_SIGPIPE_IGN:BOOL=OFF

//Support external http proxies for client connections
LWS_CLIENT_HTTP_PROXYING:BOOL=ON

//Amount of callstack to snip from bottom
LWS_COMPRESSED_BACKTRACES_SNIP_POST:STRING=1

//Amount of callstack to snip from top
LWS_COMPRESSED_BACKTRACES_SNIP_PRE:STRING=2

//CTest will performs tests that need the Internet
LWS_CTEST_INTERNET_AVAILABLE:BOOL=ON

//Path to an external pthreads include directory
LWS_EXT_PTHREAD_INCLUDE_DIR:PATH=

//Path to an external pthreads library
LWS_EXT_PTHREAD_LIBRARIES:PATH=

//Also try to do dns resolution using gethostbyname if getaddrinfo
// fails
LWS_FALLBACK_GETHOSTBYNAME:BOOL=OFF

//Enable features recommended for use with gitohashi
LWS_FOR_GITOHASHI:BOOL=OFF

//Override header reduction optimization and include all like older
// lws versions
LWS_HTTP_HEADERS_ALL:BOOL=OFF

//Installation directory for executables
LWS_INSTALL_BIN_DIR:PATH=bin

//Installation directory for CMake files
LWS_INSTALL_CMAKE_DIR:PATH=cmake

//Installation directory for example files
LWS_INSTALL_EXAMPLES_DIR:PATH=bin

//Installation directory for header files
LWS_INSTALL_INCLUDE_DIR:PATH=include

//Installation directory for libraries
LWS_INSTALL_LIB_DIR:PATH=lib

//Compile with support for ipv6
LWS_IPV6:BOOL=OFF

//Path to the libmount include directory
LWS_LIBMOUNT_INCLUDE_DIRS:PATH=

//Path to the libmount library
LWS_LIBMOUNT_LIBRARIES:PATH=

//Link the test apps to the shared version of the library. Default
// is to link statically
LWS_LINK_TESTAPPS_DYNAMIC:BOOL=OFF

//Bitfield describing which log levels to force removed from the
// build
LWS_LOGGING_BITFIELD_CLEAR:STRING=0

//Bitfield describing which log levels to force included into the
// build
LWS_LOGGING_BITFIELD_SET:STRING=0

//Timestamp at start of logs
LWS_LOGS_TIMESTAMP:BOOL=ON

//Log tagged object lifecycle as NOTICE
LWS_LOG_TAG_LIFECYCLE:BOOL=ON

//Remove everything from library except standalone SSPC client
// support
LWS_ONLY_SSPC:BOOL=OFF

//Filepath of public JWK used to validate packages
LWS_OTA_PUBLIC_JWK_FILE:STRING=/home/christian/.lws_ota/libwebsockets.org-ota-v1.public.jwk

//Build Variant ID for OTA filtering
LWS_OTA_VARIANT:STRING=set-LWS_OTA_VARIANT

//Android flavour of unix platform
LWS_PLAT_ANDROID:BOOL=OFF

//Build for deeply embedded baremetal
LWS_PLAT_BAREMETAL:BOOL=OFF

//Build for FreeRTOS
LWS_PLAT_FREERTOS:BOOL=OFF

//Build for OPTEE
LWS_PLAT_OPTEE:BOOL=OFF

//Build libwebsockets reproducible. It removes the build user and
// hostname from the build
LWS_REPRODUCIBLE:BOOL=ON

//Compile with support for DBUS
LWS_ROLE_DBUS:BOOL=OFF

//Compile with support for http/1 (needed for ws)
LWS_ROLE_H1:BOOL=ON

//Build with support for MQTT client
LWS_ROLE_MQTT:BOOL=OFF

//Compile with support for raw files
LWS_ROLE_RAW_FILE:BOOL=ON

//Raw packet proxy
LWS_ROLE_RAW_PROXY:BOOL=OFF

//Compile with support for websockets
LWS_ROLE_WS:BOOL=ON

//Path to the sqlite3 include directory
LWS_SQLITE3_INCLUDE_DIRS:PATH=

//Path to the sqlite3 library
LWS_SQLITE3_LIBRARIES:PATH=

//SSL support should make use of the OS-installed CA root certs
LWS_SSL_CLIENT_USE_OS_CA_CERTS:BOOL=ON

//Include SSL server use ECDH certificate
LWS_SSL_SERVER_WITH_ECDH_CERT:BOOL=OFF

//Build the static version of the library with position-independent
// code
LWS_STATIC_PIC:BOOL=OFF

//Turn off complaints about, eg, openssl 3 deprecated api usage
LWS_SUPPRESS_DEPRECATED_API_WARNINGS:BOOL=ON

//For debugging log the received plaintext as soon as decrypted
LWS_TLS_LOG_PLAINTEXT_RX:BOOL=OFF

//For debugging log the transmitted plaintext just before encryption
LWS_TLS_LOG_PLAINTEXT_TX:BOOL=OFF

//Compile with support for UNIX domain socket if OS supports it
LWS_UNIX_SOCK:BOOL=ON

//Don't use the BSD getifaddrs implementation from libwebsockets
// if it is missing (this will result in a compilation error) ...
// The default is to assume that your libc provides it. On some
// systems such as uclibc it doesn't exist.
LWS_WITHOUT_BUILTIN_GETIFADDRS:BOOL=OFF

//Don't build the lws sha-1 (eg, because openssl will provide it
LWS_WITHOUT_BUILTIN_SHA1:BOOL=OFF

//Don't build the client part of the library
LWS_WITHOUT_CLIENT:BOOL=OFF

//Don't build the daemonization api
LWS_WITHOUT_DAEMONIZE:BOOL=ON

//Force using pipe instead of eventfd
LWS_WITHOUT_EVENTFD:BOOL=OFF

//Don't compile with extensions
LWS_WITHOUT_EXTENSIONS:BOOL=ON

//Don't build the server part of the library
LWS_WITHOUT_SERVER:BOOL=OFF

//Don't build the libwebsocket-test-apps
LWS_WITHOUT_TESTAPPS:BOOL=OFF

//Don't build the client test application
LWS_WITHOUT_TEST_CLIENT:BOOL=OFF

//Don't build the ping test application
LWS_WITHOUT_TEST_PING:BOOL=OFF

//Don't build the test server
LWS_WITHOUT_TEST_SERVER:BOOL=OFF

//Don't build the test server version that uses external poll
LWS_WITHOUT_TEST_SERVER_EXTPOLL:BOOL=OFF

//Support generating Apache-compatible access logs
LWS_WITH_ACCESS_LOG:BOOL=OFF

//Enable support for ACME automatic cert acquisition + maintenance
// (letsencrypt etc)
LWS_WITH_ACME:BOOL=OFF

//Build lws_*alloc() with compressed backtraces (requires WITH_COMPRESSED_BACKTRACES)
LWS_WITH_ALLOC_METADATA_LWS:BOOL=OFF

//Enable alsa audio example
LWS_WITH_ALSA:BOOL=OFF

//Build with gcc runtime sanitizer options enabled (needs libasan)
LWS_WITH_ASAN:BOOL=OFF

//Use BoringSSL replacement for OpenSSL
LWS_WITH_BORINGSSL:BOOL=OFF

//Use bundled zlib version (Windows only)
LWS_WITH_BUNDLED_ZLIB:BOOL=OFF

//Build file-backed lws-cache-ttl that uses netscape cookie jar
// format (linux-only)
LWS_WITH_CACHE_NSCOOKIEJAR:BOOL=ON

//With the Lightweight LECP CBOR Parser
LWS_WITH_CBOR:BOOL=OFF

//Build floating point types if building CBOR LECP
LWS_WITH_CBOR_FLOAT:BOOL=ON

//Include CGI (spawn process with network-connected stdin/out/err)
// APIs
LWS_WITH_CGI:BOOL=OFF

//Build with support for compressed backtraces
LWS_WITH_COMPRESSED_BACKTRACES:BOOL=OFF

//Collect introspectable connection latency stats on individual
// client connections
LWS_WITH_CONMON:BOOL=ON

//COSE CBOR Signature / Encryption / Keys (RFC8152) API
LWS_WITH_COSE:BOOL=OFF

//Store and allow querying custom HTTP headers (H1 only)
LWS_WITH_CUSTOM_HEADERS:BOOL=ON

//Use CyaSSL replacement for OpenSSL. When setting this, you also
// need to specify LWS_CYASSL_LIBRARIES and LWS_CYASSL_INCLUDE_DIRS
LWS_WITH_CYASSL:BOOL=OFF

//No help, variable specified on the command line.
LWS_WITH_DAEMON:UNINITIALIZED=OFF

//Directory scanning api support
LWS_WITH_DIR:BOOL=ON

//Hashed cache directory with lazy LRU deletion to size limit (unrelated
// to lws_cache_ttl)
LWS_WITH_DISKCACHE:BOOL=OFF

//Enable features recommended for distro packaging
LWS_WITH_DISTRO_RECOMMENDED:BOOL=OFF

//Enable Display List Objects
LWS_WITH_DLO:BOOL=ON

//With generic drivers for gpio, i2c, display etc
LWS_WITH_DRIVERS:BOOL=OFF

//Build for ESP32
LWS_WITH_ESP32:BOOL=OFF

//Compile event lib support into runtime-selected plugins
LWS_WITH_EVLIB_PLUGINS:BOOL=OFF

//Export libwebsockets CMake targets.  Disable if they conflict
// with an outer cmake project.
LWS_WITH_EXPORT_LWSTARGETS:BOOL=ON

//Support external POLL integration using callback messages (not
// recommended)
LWS_WITH_EXTERNAL_POLL:BOOL=OFF

//Enable gcc -fanalyzer if compiler supports
LWS_WITH_FANALYZER:BOOL=OFF

//Support file operations vfs
LWS_WITH_FILE_OPS:BOOL=ON

//Overlayfs and fallback mounting apis
LWS_WITH_FSMOUNT:BOOL=OFF

//Full Text Search support
LWS_WITH_FTS:BOOL=OFF

//Build with gcc gcov coverage instrumentation
LWS_WITH_GCOV:BOOL=OFF

//Enable support for Generic Crypto apis independent of TLS backend
LWS_WITH_GENCRYPTO:BOOL=OFF

//Compile with support for glib event loop
LWS_WITH_GLIB:BOOL=OFF

//No help, variable specified on the command line.
LWS_WITH_GNUTLS:UNINITIALIZED=OFF

//Enable gtk example
LWS_WITH_GTK:BOOL=OFF

//Enable internal minimal gzip inflator
LWS_WITH_GZINFLATE:BOOL=ON

//Compile with server support for HTTP/2
LWS_WITH_HTTP2:BOOL=OFF

//Support Basic Auth
LWS_WITH_HTTP_BASIC_AUTH:BOOL=ON

//Also offer brotli http stream compression (requires LWS_WITH_HTTP_STREAM_COMPRESSION)
LWS_WITH_HTTP_BROTLI:BOOL=OFF

//Support Digest Auth (caution deprecated crypto)
LWS_WITH_HTTP_DIGEST_AUTH:BOOL=ON

//Support for active HTTP proxying
LWS_WITH_HTTP_PROXY:BOOL=OFF

//Support HTTP stream compression
LWS_WITH_HTTP_STREAM_COMPRESSION:BOOL=OFF

//Include less common http header support
LWS_WITH_HTTP_UNCOMMON_HEADERS:BOOL=ON

//Enable libhubbub rewriting support
LWS_WITH_HUBBUB:BOOL=OFF

//JOSE JSON Web Signature / Encryption / Keys (RFC7515/6/) API
LWS_WITH_JOSE:BOOL=OFF

//Enable stateful JPEG stream decoder
LWS_WITH_JPEG:BOOL=ON

//JSON RPC support
LWS_WITH_JSONRPC:BOOL=ON

//With the Lightweight JSON Parser
LWS_WITH_LEJP:BOOL=ON

//With LEJP configuration parser as used by lwsws
LWS_WITH_LEJP_CONF:BOOL=ON

//With the Lightweight HTML5 parser
LWS_WITH_LHP:BOOL=ON

//Compile with support for libev
LWS_WITH_LIBEV:BOOL=OFF

//Compile with support for libevent
LWS_WITH_LIBEVENT:BOOL=OFF

//Compile with support for libuv
LWS_WITH_LIBUV:BOOL=OFF

//lwsac Chunk Allocation api
LWS_WITH_LWSAC:BOOL=ON

//Libwebsockets Webserver
LWS_WITH_LWSWS:BOOL=OFF

//Support lws_dsh_t Disordered Shared Heap
LWS_WITH_LWS_DSH:BOOL=OFF

//Use mbedTLS (>=2.0) replacement for OpenSSL. When setting this,
// you also may need to specify LWS_MBEDTLS_LIBRARIES and LWS_MBEDTLS_INCLUDE_DIRS
LWS_WITH_MBEDTLS:BOOL=OFF

//Build the ttf to mcufont encoder
LWS_WITH_MCUFONT_ENCODER:BOOL=OFF

//Also build the normally standalone minimal examples, for QA
LWS_WITH_MINIMAL_EXAMPLES:BOOL=OFF

//Use miniz instead of zlib
LWS_WITH_MINIZ:BOOL=OFF

//Compile with network-related code
LWS_WITH_NETWORK:BOOL=ON

//Disable all logging other than _err and _user from being compiled
// in
LWS_WITH_NO_LOGS:BOOL=OFF

//Build with support for Over The Air update download and validation
LWS_WITH_OTA:BOOL=OFF

//Track peers and restrict resources a single peer can allocate
LWS_WITH_PEER_LIMITS:BOOL=OFF

//Support plugins for protocols and extensions (implies LWS_WITH_PLUGINS_API)
LWS_WITH_PLUGINS:BOOL=OFF

//Build generic lws_plugins apis (see LWS_WITH_PLUGINS to also
// build protocol plugins)
LWS_WITH_PLUGINS_API:BOOL=OFF

//Build the plugin protocols directly into lws library
LWS_WITH_PLUGINS_BUILTIN:BOOL=OFF

//Support http ranges (RFC7233)
LWS_WITH_RANGES:BOOL=OFF

//Compile with support for sd-event loop
LWS_WITH_SDEVENT:BOOL=OFF

//Secure Streams protocol-agnostic API
LWS_WITH_SECURE_STREAMS:BOOL=ON

//Secure Streams Auth support for AWS Sigv4
LWS_WITH_SECURE_STREAMS_AUTH_SIGV4:BOOL=OFF

//Secure Streams protocol buffer dump
LWS_WITH_SECURE_STREAMS_BUFFER_DUMP:BOOL=OFF

//Secure Streams C++ classes
LWS_WITH_SECURE_STREAMS_CPP:BOOL=OFF

//Secure Streams support to work across processes
LWS_WITH_SECURE_STREAMS_PROXY_API:BOOL=OFF

//Secure Streams Policy is hardcoded only
LWS_WITH_SECURE_STREAMS_STATIC_POLICY_ONLY:BOOL=OFF

//Auth support for api.amazon.com
LWS_WITH_SECURE_STREAMS_SYS_AUTH_API_AMAZON_COM:BOOL=OFF

//Selftests run at context creation
LWS_WITH_SELFTESTS:BOOL=OFF

//Build the shared version of the library
LWS_WITH_SHARED:BOOL=ON

//Allow use of SOCKS5 proxy on client connections
LWS_WITH_SOCKS5:BOOL=OFF

//Spawn subprocesses with piped stdin/out/stderr
LWS_WITH_SPAWN:BOOL=OFF

//Require SQLITE3 support
LWS_WITH_SQLITE3:BOOL=OFF

//Include SSL support (defaults to OpenSSL or similar, mbedTLS
// if LWS_WITH_MBEDTLS is set)
LWS_WITH_SSL:BOOL=OFF

//Secure Streams directly set/get metadata w/o policy
LWS_WITH_SS_DIRECT_PROTOCOL_STR:BOOL=OFF

//Build the static version of the library
LWS_WITH_STATIC:BOOL=ON

//Generic struct serialization to and from JSON
LWS_WITH_STRUCT_JSON:BOOL=OFF

//Generic struct serialization to and from SQLITE3
LWS_WITH_STRUCT_SQLITE3:BOOL=OFF

//Enable zombie lws_sul checking on object deletion
LWS_WITH_SUL_DEBUGGING:BOOL=OFF

//No help, variable specified on the command line.
LWS_WITH_SYSTEMD:UNINITIALIZED=OFF

//Nonblocking internal IPv4 + IPv6 DNS resolver
LWS_WITH_SYS_ASYNC_DNS:BOOL=OFF

//Build in tiny DHCP client
LWS_WITH_SYS_DHCP_CLIENT:BOOL=OFF

//Enable fault injection support
LWS_WITH_SYS_FAULT_INJECTION:BOOL=OFF

//Lws Metrics API
LWS_WITH_SYS_METRICS:BOOL=OFF

//Build in tiny ntpclient good for tls date validation and run
// via lws_system
LWS_WITH_SYS_NTPCLIENT:BOOL=OFF

//Lws System Message Distribution
LWS_WITH_SYS_SMD:BOOL=ON

//lws_system state support
LWS_WITH_SYS_STATE:BOOL=ON

//Managed worker thread pool support (relies on pthreads)
LWS_WITH_THREADPOOL:BOOL=OFF

//No help, variable specified on the command line.
LWS_WITH_TLS:UNINITIALIZED=OFF

//Enable dynamically computing which trusted TLS CA is needed to
// be instantiated
LWS_WITH_TLS_JIT_TRUST:BOOL=OFF

//Enable persistent, resumable TLS sessions
LWS_WITH_TLS_SESSIONS:BOOL=ON

//Platform supports UDP
LWS_WITH_UDP:BOOL=ON

//Compile with support for uloop
LWS_WITH_ULOOP:BOOL=OFF

//Enable stateful PNG stream decoder
LWS_WITH_UPNG:BOOL=ON

//Wake On Lan support
LWS_WITH_WOL:BOOL=ON

//Use wolfSSL replacement for OpenSSL. When setting this, you also
// may need to specify LWS_WOLFSSL_LIBRARIES and LWS_WOLFSSL_INCLUDE_DIRS
LWS_WITH_WOLFSSL:BOOL=OFF

//Support serving pre-zipped files
LWS_WITH_ZIP_FOPS:BOOL=OFF

//Include zlib support (required for extensions)
LWS_WITH_ZLIB:BOOL=OFF

//Path to the zlib/miniz include directory
LWS_ZLIB_INCLUDE_DIRS:PATH=

//Path to the zlib/miniz library
LWS_ZLIB_LIBRARIES:PATH=

//Command to build the project
MAKECOMMAND:STRING=/export/opt/cmake-3.20.6/bin/cmake --build . --config "${CTEST_CONFIGURATION_TYPE}"

//Path to the memory checking command, used for memory error detection.
MEMORYCHECK_COMMAND:FILEPATH=/usr/bin/valgrind

//File that contains suppressions for the memory checker
MEMORYCHECK_SUPPRESSIONS_FILE:FILEPATH=

//Name of the computer/site where compile is being run
SITE:STRING=bebeto

//Value Computed by CMake
libwebsockets_BINARY_DIR:STATIC=/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets/build/mingw64

//Value Computed by CMake
libwebsockets_SOURCE_DIR:STATIC=/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CMAKE_ADDR2LINE
CMAKE_ADDR2LINE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_AR
CMAKE_AR-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL=/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets/build/mingw64
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL=20
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL=6
//ADVANCED property for variable: CMAKE_COLOR_MAKEFILE
CMAKE_COLOR_MAKEFILE-ADVANCED:INTERNAL=1
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=/export/opt/cmake-3.20.6/bin/cmake
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=/export/opt/cmake-3.20.6/bin/cpack
//ADVANCED property for variable: CMAKE_CTEST_COMMAND
CMAKE_CTEST_COMMAND-ADVANCED:INTERNAL=1
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=/export/opt/cmake-3.20.6/bin/ctest
//ADVANCED property for variable: CMAKE_C_COMPILER_AR
CMAKE_C_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_RANLIB
CMAKE_C_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_STANDARD_LIBRARIES
CMAKE_C_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_DLLTOOL
CMAKE_DLLTOOL-ADVANCED:INTERNAL=1
//Path to cache edit program executable.
CMAKE_EDIT_COMMAND:INTERNAL=/export/opt/cmake-3.20.6/bin/ccmake
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=Unknown
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXPORT_COMPILE_COMMANDS
CMAKE_EXPORT_COMPILE_COMMANDS-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=Unix Makefiles
//Generator instance identifier.
CMAKE_GENERATOR_INSTANCE:INTERNAL=
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL=/export/local/works/doublegsoft.biz/bizprint/03.Development/bizprint/3rd/libwebsockets
//ADVANCED property for variable: CMAKE_INSTALL_BINDIR
CMAKE_INSTALL_BINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATADIR
CMAKE_INSTALL_DATADIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATAROOTDIR
CMAKE_INSTALL_DATAROOTDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DOCDIR
CMAKE_INSTALL_DOCDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INCLUDEDIR
CMAKE_INSTALL_INCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INFODIR
CMAKE_INSTALL_INFODIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBDIR
CMAKE_INSTALL_LIBDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBEXECDIR
CMAKE_INSTALL_LIBEXECDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALEDIR
CMAKE_INSTALL_LOCALEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALSTATEDIR
CMAKE_INSTALL_LOCALSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_MANDIR
CMAKE_INSTALL_MANDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_OLDINCLUDEDIR
CMAKE_INSTALL_OLDINCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_RUNSTATEDIR
CMAKE_INSTALL_RUNSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SBINDIR
CMAKE_INSTALL_SBINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SHAREDSTATEDIR
CMAKE_INSTALL_SHAREDSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SYSCONFDIR
CMAKE_INSTALL_SYSCONFDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MAKE_PROGRAM
CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_NM
CMAKE_NM-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=22
//ADVANCED property for variable: CMAKE_OBJCOPY
CMAKE_OBJCOPY-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJDUMP
CMAKE_OBJDUMP-ADVANCED:INTERNAL=1
//Platform information initialized
CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RANLIB
CMAKE_RANLIB-ADVANCED:INTERNAL=1
CMAKE_RC_COMPILER_WORKS:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS
CMAKE_RC_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_DEBUG
CMAKE_RC_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_MINSIZEREL
CMAKE_RC_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELEASE
CMAKE_RC_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELWITHDEBINFO
CMAKE_RC_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_READELF
CMAKE_READELF-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL=/export/opt/cmake-3.20.6/share/cmake-3.20
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STRIP
CMAKE_STRIP-ADVANCED:INTERNAL=1
//uname command
CMAKE_UNAME:INTERNAL=/bin/uname
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: COVERAGE_COMMAND
COVERAGE_COMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: COVERAGE_EXTRA_FLAGS
COVERAGE_EXTRA_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CTEST_SUBMIT_RETRY_COUNT
CTEST_SUBMIT_RETRY_COUNT-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CTEST_SUBMIT_RETRY_DELAY
CTEST_SUBMIT_RETRY_DELAY-ADVANCED:INTERNAL=1
//ADVANCED property for variable: DART_TESTING_TIMEOUT
DART_TESTING_TIMEOUT-ADVANCED:INTERNAL=1
//Details about finding Git
FIND_PACKAGE_MESSAGE_DETAILS_Git:INTERNAL=[/usr/bin/git][v2.17.1()]
//ADVANCED property for variable: GITCOMMAND
GITCOMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: GIT_EXECUTABLE
GIT_EXECUTABLE-ADVANCED:INTERNAL=1
//Test LWS_GCC_HAS_IGNORED_QUALIFIERS
LWS_GCC_HAS_IGNORED_QUALIFIERS:INTERNAL=1
//Test LWS_GCC_HAS_NO_DEPRECATED_DECLARATIONS
LWS_GCC_HAS_NO_DEPRECATED_DECLARATIONS:INTERNAL=1
//Test LWS_GCC_HAS_TYPE_LIMITS
LWS_GCC_HAS_TYPE_LIMITS:INTERNAL=1
//Test LWS_HAS_GETOPT_LONG
LWS_HAS_GETOPT_LONG:INTERNAL=1
//Test LWS_HAS_INTPTR_T
LWS_HAS_INTPTR_T:INTERNAL=1
//Test LWS_HAS_PTHREAD_SETNAME_NP
LWS_HAS_PTHREAD_SETNAME_NP:INTERNAL=
//Have function atoll
LWS_HAVE_ATOLL:INTERNAL=1
//Have function clock_gettime
LWS_HAVE_CLOCK_GETTIME:INTERNAL=
//Have function ctime_r
LWS_HAVE_CTIME_R:INTERNAL=
//Have function execvpe
LWS_HAVE_EXECVPE:INTERNAL=1
//Have function fork
LWS_HAVE_FORK:INTERNAL=
//Have function getenv
LWS_HAVE_GETENV:INTERNAL=1
//Have function getgrgid_r
LWS_HAVE_GETGRGID_R:INTERNAL=
//Have function getgrnam_r
LWS_HAVE_GETGRNAM_R:INTERNAL=
//Have function getifaddrs
LWS_HAVE_GETIFADDRS:INTERNAL=
//Have function getloadavg
LWS_HAVE_GETLOADAVG:INTERNAL=
//Have function getpwnam_r
LWS_HAVE_GETPWNAM_R:INTERNAL=
//Have function getpwuid_r
LWS_HAVE_GETPWUID_R:INTERNAL=
//Have function gmtime_r
LWS_HAVE_GMTIME_R:INTERNAL=
//Test LWS_HAVE_IN6ADDR_H
LWS_HAVE_IN6ADDR_H:INTERNAL=1
//Test LWS_HAVE_INTTYPES_H
LWS_HAVE_INTTYPES_H:INTERNAL=1
//Test LWS_HAVE_LINUX_IPV6_H
LWS_HAVE_LINUX_IPV6_H:INTERNAL=
//Have function localtime_r
LWS_HAVE_LOCALTIME_R:INTERNAL=
//Have function malloc
LWS_HAVE_MALLOC:INTERNAL=1
//Test LWS_HAVE_MALLOC_H
LWS_HAVE_MALLOC_H:INTERNAL=1
//Test LWS_HAVE_MALLOC_TRIM
LWS_HAVE_MALLOC_TRIM:INTERNAL=
//Test LWS_HAVE_MALLOC_USABLE_SIZE
LWS_HAVE_MALLOC_USABLE_SIZE:INTERNAL=
//Test LWS_HAVE_MEMORY_H
LWS_HAVE_MEMORY_H:INTERNAL=1
//Have function memset
LWS_HAVE_MEMSET:INTERNAL=1
//Test LWS_HAVE_NETINET_IN_H
LWS_HAVE_NETINET_IN_H:INTERNAL=
//Test LWS_HAVE_NET_ETHERNET_H
LWS_HAVE_NET_ETHERNET_H:INTERNAL=
//Test LWS_HAVE_NET_IF_ETHER_H
LWS_HAVE_NET_IF_ETHER_H:INTERNAL=
//Test LWS_HAVE_PIPE2
LWS_HAVE_PIPE2:INTERNAL=
//Test LWS_HAVE_PTHREAD_H
LWS_HAVE_PTHREAD_H:INTERNAL=1
//Have function realloc
LWS_HAVE_REALLOC:INTERNAL=1
//Test LWS_HAVE_RTA_PREF
LWS_HAVE_RTA_PREF:INTERNAL=
//Have function snprintf
LWS_HAVE_SNPRINTF:INTERNAL=1
//Have function socket
LWS_HAVE_SOCKET:INTERNAL=
//Test LWS_HAVE_STDINT_H
LWS_HAVE_STDINT_H:INTERNAL=1
//Test LWS_HAVE_STDLIB_H
LWS_HAVE_STDLIB_H:INTERNAL=1
//Have function strerror
LWS_HAVE_STRERROR:INTERNAL=1
//Test LWS_HAVE_STRINGS_H
LWS_HAVE_STRINGS_H:INTERNAL=1
//Test LWS_HAVE_STRING_H
LWS_HAVE_STRING_H:INTERNAL=1
//Test LWS_HAVE_SUSECONDS_T
LWS_HAVE_SUSECONDS_T:INTERNAL=
//Test LWS_HAVE_SYSTEMD_H
LWS_HAVE_SYSTEMD_H:INTERNAL=
//Test LWS_HAVE_SYS_CAPABILITY_H
LWS_HAVE_SYS_CAPABILITY_H:INTERNAL=
//Test LWS_HAVE_SYS_PRCTL_H
LWS_HAVE_SYS_PRCTL_H:INTERNAL=
//Test LWS_HAVE_SYS_RESOURCE_H
LWS_HAVE_SYS_RESOURCE_H:INTERNAL=
//Test LWS_HAVE_SYS_SOCKET_H
LWS_HAVE_SYS_SOCKET_H:INTERNAL=
//Test LWS_HAVE_SYS_SOCKIO_H
LWS_HAVE_SYS_SOCKIO_H:INTERNAL=
//Test LWS_HAVE_SYS_STAT_H
LWS_HAVE_SYS_STAT_H:INTERNAL=1
//Test LWS_HAVE_SYS_TYPES_H
LWS_HAVE_SYS_TYPES_H:INTERNAL=1
//Test LWS_HAVE_TCP_USER_TIMEOUT
LWS_HAVE_TCP_USER_TIMEOUT:INTERNAL=
//Have function timegm
LWS_HAVE_TIMEGM:INTERNAL=
//Test LWS_HAVE_UNISTD_H
LWS_HAVE_UNISTD_H:INTERNAL=1
//Have function vfork
LWS_HAVE_VFORK:INTERNAL=
//Test LWS_HAVE_VFORK_H
LWS_HAVE_VFORK_H:INTERNAL=
//Test LWS_HAVE_VISIBILITY
LWS_HAVE_VISIBILITY:INTERNAL=1
//Test LWS_HAVE_WIN32_AFUNIX_H
LWS_HAVE_WIN32_AFUNIX_H:INTERNAL=
//Have function _atoi64
LWS_HAVE__ATOI64:INTERNAL=1
//Have function _snprintf
LWS_HAVE__SNPRINTF:INTERNAL=1
//Have function _stat32i64
LWS_HAVE__STAT32I64:INTERNAL=
//Have function _vsnprintf
LWS_HAVE__VSNPRINTF:INTERNAL=1
//Test LWS_HAVE___inline
LWS_HAVE___inline:INTERNAL=1
//Test LWS_HAVE___inline__
LWS_HAVE___inline__:INTERNAL=1
//Test LWS_HAVE_inline
LWS_HAVE_inline:INTERNAL=1
//ADVANCED property for variable: MAKECOMMAND
MAKECOMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: MEMORYCHECK_COMMAND
MEMORYCHECK_COMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: MEMORYCHECK_SUPPRESSIONS_FILE
MEMORYCHECK_SUPPRESSIONS_FILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: SITE
SITE-ADVANCED:INTERNAL=1
//Have include stdlib.h;stdarg.h;string.h
STDC_HEADERS:INTERNAL=1
//CMAKE_INSTALL_PREFIX during last run
_GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX:INTERNAL=/usr/local

